// Generated by gencpp from file triangulator/beaconBest.msg
// DO NOT EDIT!


#ifndef TRIANGULATOR_MESSAGE_BEACONBEST_H
#define TRIANGULATOR_MESSAGE_BEACONBEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace triangulator
{
template <class ContainerAllocator>
struct beaconBest_
{
  typedef beaconBest_<ContainerAllocator> Type;

  beaconBest_()
    : ID(0.0)
    , R(0.0)
    , C(0.0)
    , SS(0.0)
    , Theta(0.0)
    , Phi(0.0)
    , AdjR(0.0)
    , AdjC(0.0)
    , ObsErr(0.0)
    , Status(0.0)
    , IsReflect(false)
    , IsUsedInEst(false)
    , IsOvl(false)  {
    }
  beaconBest_(const ContainerAllocator& _alloc)
    : ID(0.0)
    , R(0.0)
    , C(0.0)
    , SS(0.0)
    , Theta(0.0)
    , Phi(0.0)
    , AdjR(0.0)
    , AdjC(0.0)
    , ObsErr(0.0)
    , Status(0.0)
    , IsReflect(false)
    , IsUsedInEst(false)
    , IsOvl(false)  {
    }



   typedef float _ID_type;
  _ID_type ID;

   typedef float _R_type;
  _R_type R;

   typedef float _C_type;
  _C_type C;

   typedef float _SS_type;
  _SS_type SS;

   typedef float _Theta_type;
  _Theta_type Theta;

   typedef float _Phi_type;
  _Phi_type Phi;

   typedef float _AdjR_type;
  _AdjR_type AdjR;

   typedef float _AdjC_type;
  _AdjC_type AdjC;

   typedef float _ObsErr_type;
  _ObsErr_type ObsErr;

   typedef float _Status_type;
  _Status_type Status;

   typedef uint8_t _IsReflect_type;
  _IsReflect_type IsReflect;

   typedef uint8_t _IsUsedInEst_type;
  _IsUsedInEst_type IsUsedInEst;

   typedef uint8_t _IsOvl_type;
  _IsOvl_type IsOvl;




  typedef boost::shared_ptr< ::triangulator::beaconBest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::triangulator::beaconBest_<ContainerAllocator> const> ConstPtr;

}; // struct beaconBest_

typedef ::triangulator::beaconBest_<std::allocator<void> > beaconBest;

typedef boost::shared_ptr< ::triangulator::beaconBest > beaconBestPtr;
typedef boost::shared_ptr< ::triangulator::beaconBest const> beaconBestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::triangulator::beaconBest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::triangulator::beaconBest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace triangulator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'triangulator': ['/Users/GBrill/catkin_ws/src/triangulator_service/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::triangulator::beaconBest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::triangulator::beaconBest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulator::beaconBest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulator::beaconBest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulator::beaconBest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulator::beaconBest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::triangulator::beaconBest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d99c3bb96692b1aa8dee26b3ef478f3d";
  }

  static const char* value(const ::triangulator::beaconBest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd99c3bb96692b1aaULL;
  static const uint64_t static_value2 = 0x8dee26b3ef478f3dULL;
};

template<class ContainerAllocator>
struct DataType< ::triangulator::beaconBest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "triangulator/beaconBest";
  }

  static const char* value(const ::triangulator::beaconBest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::triangulator::beaconBest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ID\n\
float32 R\n\
float32 C\n\
float32 SS\n\
float32 Theta\n\
float32 Phi\n\
float32 AdjR\n\
float32 AdjC\n\
float32 ObsErr\n\
float32 Status\n\
bool IsReflect\n\
bool IsUsedInEst\n\
bool IsOvl\n\
";
  }

  static const char* value(const ::triangulator::beaconBest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::triangulator::beaconBest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.R);
      stream.next(m.C);
      stream.next(m.SS);
      stream.next(m.Theta);
      stream.next(m.Phi);
      stream.next(m.AdjR);
      stream.next(m.AdjC);
      stream.next(m.ObsErr);
      stream.next(m.Status);
      stream.next(m.IsReflect);
      stream.next(m.IsUsedInEst);
      stream.next(m.IsOvl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct beaconBest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::triangulator::beaconBest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::triangulator::beaconBest_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<float>::stream(s, indent + "  ", v.ID);
    s << indent << "R: ";
    Printer<float>::stream(s, indent + "  ", v.R);
    s << indent << "C: ";
    Printer<float>::stream(s, indent + "  ", v.C);
    s << indent << "SS: ";
    Printer<float>::stream(s, indent + "  ", v.SS);
    s << indent << "Theta: ";
    Printer<float>::stream(s, indent + "  ", v.Theta);
    s << indent << "Phi: ";
    Printer<float>::stream(s, indent + "  ", v.Phi);
    s << indent << "AdjR: ";
    Printer<float>::stream(s, indent + "  ", v.AdjR);
    s << indent << "AdjC: ";
    Printer<float>::stream(s, indent + "  ", v.AdjC);
    s << indent << "ObsErr: ";
    Printer<float>::stream(s, indent + "  ", v.ObsErr);
    s << indent << "Status: ";
    Printer<float>::stream(s, indent + "  ", v.Status);
    s << indent << "IsReflect: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IsReflect);
    s << indent << "IsUsedInEst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IsUsedInEst);
    s << indent << "IsOvl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IsOvl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRIANGULATOR_MESSAGE_BEACONBEST_H
